package ru.vad1mchk.progr.lab05.client.datatypes

import ru.vad1mchk.progr.lab05.client.exceptions.ValidationException
import ru.vad1mchk.progr.lab05.client.messages.Messages
import ru.vad1mchk.progr.lab05.client.util.AutoGenerated
import java.time.LocalDate
import java.time.format.DateTimeFormatter
import java.util.*

data class SpaceMarine(
    val name: String,
    val coordinates: Coordinates,
    @AutoGenerated val creationDate: LocalDate,
    val health: Double,
    val heartCount: Long,
    val loyal: Boolean,
    val meleeWeapon: MeleeWeapon?,
    val chapter: Chapter?
) : Validated, Comparable<SpaceMarine> {
    companion object {
        const val MIN_ID = 1
        const val STRICT_MIN_HEALTH = 0.0
        const val STRICT_MIN_HEART_COUNT = 0L
        const val MAX_HEART_COUNT = 3L
    }

    @AutoGenerated
    var id: Int = 1

    init {
        validate()
    }

    override fun validate() {
        if (id < MIN_ID) throw ValidationException(String.format(Messages["errorValidationSpaceMarineID"], MIN_ID))
        if (health <= STRICT_MIN_HEALTH) throw ValidationException(
            String.format(
                Messages["errorValidationSpaceMarineHealth"],
                STRICT_MIN_HEALTH
            )
        )
        if (heartCount !in (STRICT_MIN_HEART_COUNT + 1..MAX_HEART_COUNT))
            throw ValidationException(
                String.format(
                    Messages["errorValidationSpaceMarineHeartCount"],
                    STRICT_MIN_HEART_COUNT,
                    MAX_HEART_COUNT
                )
            )
    }

    override fun compareTo(other: SpaceMarine): Int {
        this.name.compareTo(other.name).let {
            if (it != 0) return it
        }
        this.creationDate.compareTo(other.creationDate).let {
            if (it != 0) return it
        }
        this.loyal.compareTo(other.loyal).let {
            if (it != 0) return it
        }
        return 0
    }

    override fun equals(o: Any?): Boolean {
        if (this === o) {
            return true
        }
        if (o == null || javaClass != o.javaClass) {
            return false
        }
        val that = o as SpaceMarine
        return (id == that.id && heartCount == that.heartCount && loyal == that.loyal && name == that.name && coordinates == that.coordinates
                && creationDate == that.creationDate && health == that.health && meleeWeapon == that.meleeWeapon
                && chapter == that.chapter)
    }

    override fun hashCode(): Int {
        return Objects.hash(name, coordinates, creationDate, health, heartCount, meleeWeapon, chapter) xor id xor
                if (loyal) Int.MAX_VALUE else 0
    }

    override fun toString(): String {
        return String.format(
            Locale.ROOT,
            Messages["infoSpaceMarineRepresentationFormatString"],
            name,
            id,
            coordinates,
            creationDate.format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
            health,
            heartCount,
            if (loyal) "loyal" else "not loyal",
            meleeWeapon ?: "-",
            chapter ?: "-"
        )
    }
}
